---
type Props = {
	defaultTheme?: "auto" | "dark" | "light" | undefined;
};

const { defaultTheme = "auto" } = Astro.props;
---

<script is:inline type="application/json" data-default-theme={defaultTheme} id="theme-config"
></script>

<script>
	console.log("ThemeManager loaded");
	type Theme = "auto" | "dark" | "light";

	const config = document.getElementById("theme-config");
	const defaultTheme = (config?.dataset.defaultTheme || "auto") as Theme;

	const storageKey = "theme";
	const store =
		typeof localStorage !== "undefined"
			? localStorage
			: { getItem: () => null, setItem: (_key: string, _value: string) => void 0 };

	const mediaMatcher = window.matchMedia("(prefers-color-scheme: light)");
	let systemTheme: "light" | "dark" = mediaMatcher.matches ? "light" : "dark";

	mediaMatcher.addEventListener("change", (e) => {
		systemTheme = e.matches ? "light" : "dark";
		applyTheme(getTheme());
	});

	function applyTheme(theme: Theme) {
		document.documentElement.dataset.theme = theme === "auto" ? systemTheme : theme;
		document.dispatchEvent(
			new CustomEvent("theme-changed", {
				detail: { theme, systemTheme, defaultTheme },
			}),
		);
	}

	function setTheme(theme: Theme = defaultTheme) {
		store.setItem(storageKey, theme);
		applyTheme(theme);
	}

	function getTheme(): Theme {
		return (store.getItem(storageKey) || defaultTheme) as Theme;
	}

	function getSystemTheme(): "light" | "dark" {
		return systemTheme;
	}

	function getDefaultTheme(): Theme {
		return defaultTheme;
	}

	window.theme ??= { setTheme, getTheme, getSystemTheme, getDefaultTheme };

	setTheme(getTheme());
</script>
